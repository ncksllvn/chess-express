type Move {
  captured: Boolean
  color: String
  from: String!
  flags: String
  piece: String
  promotion: Boolean
  san: String
  to: String!
}

type Game {
  ascii: String
  bestMove: String
  fen: String
  gameOver: Boolean
  inCheck: Boolean
  inCheckmate: Boolean
  inDraw: Boolean
  inStalemate: Boolean
  inThreefoldRepetition: Boolean
  insufficientMaterial: Boolean
  moves: [Move]
  turn: String
}

type Query {
  game(fen: String): Game
}

input MoveInput {
  from: String!
  to: String!
  promotion: String
}

input MakeMoveInput {
  fen: String!
  move: MoveInput
}

type Mutation {
  makeMove(input: MakeMoveInput): Game
}
