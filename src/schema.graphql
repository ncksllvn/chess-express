enum PROMOTIONS { q r b n }

type Flags {
  NORMAL: String,
  CAPTURE: String,
  BIG_PAWN: String,
  EP_CAPTURE: String,
  PROMOTION: String,
  KSIDE_CASTLE: String,
  QSIDE_CASTLE: String
}

type Constants {
  BISHOP: String,
  BLACK: String,
  FLAGS: Flags,
  KING: String,
  KNIGHT: String,
  PAWN: String,
  QUEEN: String,
  ROOK: String,
  SQUARES: [String],
  WHITE: String
}

type Move {
  captured: Boolean
  color: String
  from: String!
  flags: String
  piece: String
  promotion: PROMOTIONS
  san: String
  to: String!
}

type Game {
  ascii: String
  bestMove: String
  constants: Constants
  fen: String
  gameOver: Boolean
  inCheck: Boolean
  inCheckmate: Boolean
  inDraw: Boolean
  inStalemate: Boolean
  inThreefoldRepetition: Boolean
  insufficientMaterial: Boolean
  moves: [Move]
  turn: String
}

type Query {
  game(fen: String): Game
}

input MoveInput {
  from: String!
  to: String!
  promotion: PROMOTIONS
}

input MakeMoveInput {
  fen: String!
  move: MoveInput
}

type Mutation {
  makeMove(input: MakeMoveInput): Game
}
