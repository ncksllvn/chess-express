"""
A letter indicating a column of the board
"""
enum FILE { a b c d e f g h }

"""
Represents the game pieces
"""
enum PIECE_TYPE { p r n b q k }

"""
Represents the piece colors
"""
enum COLOR { w b }

"""
Represents various game flags
n - a non-capture
b - a pawn push of two squares
e - an en passant capture
c - a standard capture
p - a promotion
k - kingside castling
q - queenside castling
"""
enum FLAG { n b e c p k q }

"""
Represents the squares on the board by column/row
"""
enum SQUARE {
  a8 b8 c8 d8 e8 f8 g8 h8
  a7 b7 c7 d7 e7 f7 g7 h7
  a6 b6 c6 d6 e6 f6 g6 h6
  a5 b5 c5 d5 e5 f5 g5 h5
  a4 b4 c4 d4 e4 f4 g4 h4
  a3 b3 c3 d3 e3 f3 g3 h3
  a2 b2 c2 d2 e2 f2 g2 h2
  a1 b1 c1 d1 e1 f1 g1 h1
}

"""
Represents a mapping of flag constants to their enum values
"""
type Flags {
  NORMAL: FLAG!
  CAPTURE: FLAG!
  BIG_PAWN: FLAG!
  EP_CAPTURE: FLAG!
  PROMOTION: FLAG!
  KSIDE_CASTLE: FLAG!
  QSIDE_CASTLE: FLAG!
}

"""
Represents a mapping of various constants to their enum values
"""
type Constants {
  BISHOP: PIECE_TYPE!
  BLACK: COLOR!
  FLAGS: Flags!
  KING: PIECE_TYPE!
  KNIGHT: PIECE_TYPE!
  PAWN: PIECE_TYPE!
  QUEEN: PIECE_TYPE!
  ROOK: PIECE_TYPE!
  SQUARES: [SQUARE!]!
  WHITE: COLOR!
}

"""
Describes a piece's movement to and from a square
"""
type Move {
  captured: PIECE_TYPE
  color: COLOR
  from: SQUARE!
  flags: String
  piece: PIECE_TYPE
  promotion: PIECE_TYPE
  san: String
  to: SQUARE!
}

type AnalysisResults {
  bestMove: Move!
  ponderMove: Move
}

type Analysis {
  results: AnalysisResults
}

type Piece {
  type: PIECE_TYPE
  color: COLOR
}

type RowSquare {
  file: FILE!
  piece: Piece
}

type Row {
  rank: Int,
  squares: [RowSquare]
}

"""
Describes a game of chess and the associated board
"""
type Chess {
  """
  Returns a string containing an ASCII diagram of the current position.
  """
  ascii: String

  """
  Returns the best move as calculated by the game engine
  """
  analysis: AnalysisResults

  """
  Returns a representation of the board with each row listed as a key
  """
  board: [Row]

  """
  Returns the FEN string for the current position.
  """
  fen: String

  """
  Returns true if the game has ended via checkmate, stalemate, draw, threefold repetition, or insufficient material. Otherwise, returns false.
  """
  gameOver: Boolean

  """
  Returns true or false if the side to move is in check.
  """
  inCheck: Boolean

  """
  Returns true or false if the side to move has been checkmated.
  """
  inCheckmate: Boolean

  """
  Returns true or false if the game is drawn (50-move rule or insufficient material).
  """
  inDraw: Boolean

  """
  Returns true or false if the side to move has been stalemated.
  """
  inStalemate: Boolean

  """
  Returns true or false if the current board position has occurred three or more times.
  """
  inThreefoldRepetition: Boolean

  """
  Returns true if the game is drawn due to insufficient material (K vs. K, K vs. KB, or K vs. KN) otherwise false.
  """
  insufficientMaterial: Boolean

  """
  Returns a list of legal moves from the current position.
  """
  moves: [Move]

  """
  Returns the current side to move.
  """
  turn: COLOR
}

"""
Retrieve game data via FEN (Forsythâ€“Edwards Notation)
"""
type Query {
  analysis(fen: String!): Analysis!
  constants: Constants!
  chess(fen: String): Chess!
}

input MoveObjectInput {
  from: SQUARE!
  to: SQUARE!
  promotion: PIECE_TYPE
}

"""
An input representing a board via its FEN string and a move to apply to that board
"""
input MoveInput {
  fen: String!

  """
  An input representing a move's position, destination, and a promotion (if applicable)
  """
  move: MoveObjectInput

  """
  A move represented in Standard Algebraic Notation (SAN)
  """
  san: String
}

"""
Manipulate and retrieve chess objects
"""
type Mutation {

  """
  Attempts to make a move on the board, returning a move object if the move was legal, otherwise null.
  The .move function can be called two ways, by passing a string in Standard Algebraic Notation (SAN).
  Or by passing .move() a move object (only the 'to', 'from', and when necessary 'promotion', fields are needed)
  """
  move(input: MoveInput): Chess
}
